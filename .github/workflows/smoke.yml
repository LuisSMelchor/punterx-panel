name: Smoke Functions

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  actions: write

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      SITE_BASE: ${{ secrets.SITE_BASE }}
      DEBUG_TOKEN: ${{ secrets.DEBUG_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show context (raw vs trim)
        shell: bash
        run: |
          set -euo pipefail
          SB_RAW="${SITE_BASE:-}"
          DT_RAW="${DEBUG_TOKEN:-}"
          SB_TRIM="$(printf "%s" "$SB_RAW" | tr -d '\r\n')"
          DT_TRIM="$(printf "%s" "$DT_RAW" | tr -d '\r\n')"
          echo "[AF_DEBUG] GITHUB_SHA=$GITHUB_SHA"
          echo "[AF_DEBUG] SITE_BASE raw len=${#SB_RAW}  trim len=${#SB_TRIM}"
          echo "[AF_DEBUG] DEBUG_TOKEN raw len=${#DT_RAW} trim len=${#DT_TRIM}"

      - name: Install jq & curl
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Smoke (diag-impl-call + autopick-vip-run3)
        shell: bash
        env:
          BASE: ${{ secrets.SITE_BASE }}
          TOKEN_RAW: ${{ secrets.DEBUG_TOKEN }}
        run: |
          set -euo pipefail
          BASE_TRIM="$(printf "%s" "${BASE:-}" | tr -d '\r\n')"
          TOKEN="$(printf "%s" "${TOKEN_RAW:-}" | tr -d '\r\n')"

          echo "[AF_DEBUG] BASE=$BASE_TRIM"
          echo "[AF_DEBUG] DEBUG_TOKEN len (trim) = ${#TOKEN}"

          test -n "$BASE_TRIM" || { echo "::error::SITE_BASE vacío"; exit 1; }
          test -n "$TOKEN"     || { echo "::error::DEBUG_TOKEN vacío"; exit 1; }

          pass=1

          smoke_inspect () {
            local fn="$1" code
            code=$(curl -sS -o "/tmp/${fn}_i.json" -w '%{http_code}' \
              "$BASE_TRIM/$fn?inspect=1&debug=1" \
              -H "x-debug: 1" -H "x-debug-token: $TOKEN")
            jq . "/tmp/${fn}_i.json" >/dev/null 2>&1 || true
            if [ "$code" = "200" ] && jq -e '.hasHandler==true' "/tmp/${fn}_i.json" >/dev/null 2>&1; then
              echo "[AF_DEBUG] $fn inspect OK (200)"
            else
              echo "[AF_DEBUG] $fn inspect FAIL (code=$code)"; pass=0
            fi
          }

          smoke_bypass () {
            local fn="$1" code
            code=$(curl -sS -o "/tmp/${fn}_b.json" -w '%{http_code}' \
              "$BASE_TRIM/$fn?bypass=1&debug=1" \
              -H "x-debug: 1" -H "x-debug-token: $TOKEN")
            echo "[AF_DEBUG] $fn bypass code=$code"
            jq . "/tmp/${fn}_b.json" || cat "/tmp/${fn}_b.json" || true
            if [ "$code" = "403" ]; then
              echo "[AF_DEBUG] $fn bypass OK (403)"
            else
              echo "[AF_DEBUG] $fn bypass FAIL (code=$code)"; pass=0
            fi
          }

          smoke_inspect diag-impl-call
          smoke_inspect autopick-vip-run3
          smoke_bypass  diag-impl-call
          smoke_bypass  autopick-vip-run3

          if [ "$pass" -eq 1 ]; then
            echo "[AF_DEBUG] SMOKE OK"
          else
            echo "::error::SMOKE FAILED"; exit 1
          fi
